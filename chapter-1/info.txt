wildcards - shortcuts;
You might think that including so many classes slows down your program, but it doesn’t. The
compiler fi gures out what’s actually needed. Which approach you choose is personal preference.
Listing the classes used makes the code easier to read, especially for new programmers. Using the
wildcard can shorten the import list. You’ll see both approaches on the exam.


Redundant Imports - for ex: System;

java.lang: automatically imported;

import java.util.Random;
import java.util.*; -- redundant because Random is imported already;

Now let’s consider some imports that don’t work:

import java.nio.*; // NO GOOD – a wildcard only matches
//class names, not "file.*Files"

import java.nio.*.*; // NO GOOD – you can only have one wildcard
//and it must be at the end

import java.nio.files.Paths.*; // NO GOOD – you cannot import methods
//only class names

import java.util.*;
import java.sql.*; // DOES NOT COMPILE

When the class is found in multiple packages, Java gives you the compiler error:
The type Date is ambiguous

In our example, the solution is easy—remove the java.sql.Date import that we don’t
need. But what do we do if we need a whole pile of other classes in the java.sql package?
import java.util.Date;
import java.sql.*;
Ah, now it works. If you explicitly import a class name, it takes precedence over any
wildcards present. Java thinks, “Okay! The programmer really wants me to assume use of
the java.util.Date class.”

One more example. What does Java do with “ties” for precedence?
import java.util.Date;
import java.sql.Date;
Java is smart enough to detect that this code is no good. As a programmer, you’ve
claimed to explicitly want the default to be both the java.util.Date and java.sql.Date
implementations. Because there can’t be two defaults, the compiler tells you:
The import java.sql.Date collides with another import statement

There are two key points to note about the constructor: the name of the constructor
matches the name of the class, and there’s "no return type".

There are three code blocks and one instance initializer. Counting code blocks is easy:
you just count the number of pairs of braces. If there aren’t the same number of open ( { )
and close ( } ) braces, the code doesn’t compile. It doesn’t matter that one set of braces is
inside the main() method—it still counts.

In the meantime, you need to remember:
■
■
Fields and instance initializer blocks are run in the order in which they appear in
the file.
The constructor runs after all fields and instance initializer blocks have run.


Java applications contain two types of data: "primitive" types and "reference" types. In this
section, we’ll discuss the differences between a primitive type and a reference type.

The exam will
include it in the question if it comes up.
long max = 3123456789;
// DOES NOT COMPILE
Java complains the number is out of range. And it is—for an int . However, we don’t
have an int . The solution is to add the character L to the number:
long max = 3123456789L;
// now Java knows it is a long


Another way to specify numbers is to change the “base.” When you learned how to
count, you studied the digits 0–9. This numbering system is called base 10 since there are
10 numbers. It is also known as the decimal number system. Java allows you to specify dig-
its in several other formats:
■
■
■
octal (digits 0–7), which uses the number 0 as a prefix—for example, 017
hexadecimal (digits 0–9 and letters A–F), which uses the number 0 followed by x or X
as a prefix—for example, 0xFF
binary (digits 0–1), which uses the number 0 followed by b or B as a prefix—for exam-
ple, 0b10


System.out.println(56); // 56
System.out.println(0b11); // 3
System.out.println(017); // 15
System.out.println(0x1F); // 31


The last thing you need to know about numeric literals is a feature added in Java 7. You
can have underscores in numbers to make them easier to read:
int million1 = 1000000;
int million2 = 1_000_000;

We’d rather be reading the latter one because the zeroes don’t run together. You can add
underscores anywhere except at the beginning of a literal, the end of a literal, right before a
decimal point, or right after a decimal point. Let’s look at a few examples:
double
double
double
double
notAtStart = _1000.00;
// DOES NOT COMPILE
notAtEnd = 1000.00_;
// DOES NOT COMPILE
notByDecimal = 1000_.00;
// DOES NOT COMPILE
annoyingButLegal = 1_00_0.0_0; // this one compiles


Key Differences
There are a few important differences you should know between primitives and reference
types. First, reference types can be assigned null , which means they do not currently refer
to an object. Primitive types will give you a compiler error if you attempt to assign them
null . In this example, value cannot point to null because it is of type int :
int value = null;
String s = null;


Identifires

There are only three rules to remember for legal identifi ers:
■ The name must begin with a letter or the symbol $ or _ .
■ Subsequent characters may also be numbers.
■
You cannot use the same name as a Java reserved word. As you might imagine, a
reserved word is a keyword that Java has reserved so that you are not allowed to use it.
Remember that Java is case sensitive, so you can use versions of the keywords that only
differ in case. Please don’t, though.


These examples are not legal:
3DPointClass // identifiers cannot begin with a number
hollywood@vine // @ is not a letter, digit, $ or _
*$coffee // * is not a letter, digit, $ or _
public
// public is a reserved word


Prepare to be tested on these rules. The following examples are legal:
okidentifier
$OK2Identifier
_alsoOK1d3ntifi3r
__SStillOkbutKnotsonice$


Class names begin with an uppercase letter followed by CamelCase. Don’t start any
identifi ers with $ . The compiler uses this symbol for some fi les.


Instance and Class Variables
Variables that are not local variables are known as instance variables or class variables.
Instance variables are also called fi elds. Class variables are shared across multiple objects.

Variable Scope - shekarasy

3: public void eatIfHungry(boolean hungry) {
4: if (hungry) {
5:
int bitesOfCheese = 1;
6: } // bitesOfCheese goes out of scope here
7:
System.out.println(bitesOfCheese);// DOES NOT COMPILE
8: }

hungry has a scope of the entire method. bitesOfCheese has a smaller scope. It is only
available for use in the if statement because it is declared inside of it. When you see a set of
braces ( { } ) in the code, it means you have entered a new block of code. Each block of code
has its own scope. When there are multiple blocks, you match them from the inside out.
In our case, the if statement block begins at line 4 and ends at line 6. The method’s block
begins at line 3 and ends at line 8.

You’ve learned that local variables are declared within a method. How many local variables
do you see in this example?
public void eat(int piecesOfCheese) {
int bitesOfCheese = 1;
}
There are two local variables in this method. bitesOfCheese is declared inside the
method. piecesOfCheese is called a method parameter. It is also local to the method. Both
of these variables are said to have a scope local to the method. This means they cannot be
used outside the method.

Remember that blocks can contain other blocks. These smaller contained blocks can ref-
erence variables defi ned in the larger scoped blocks, but not vice versa. For example:
16: public void eatIfHungry(boolean hungry) {
17:
if (hungry) {
18:
int bitesOfCheese = 1;
19:
{
20:
boolean teenyBit = true;
21:
System.out.println(bitesOfCheese);
22:
}
23:
}
24:
System.out.println(teenyBit); // DOES NOT COMPILE
25: }


1:
2:
3:
public class Mouse {
static int MAX_LENGTH = 5;
int length;

4:
public void grow(int inches) {
5:
if (length < MAX_LENGTH) {
6:
int newSize = length + inches;
7:
length = newSize;
8:
}
9:
}
10: }
In this class, we have one class variable ( MAX_LENGTH ), one instance variable ( length ),
and two local variables ( inches and newSize .) MAX_LENGTH is a class variable because it has
the static keyword in its declaration.

■ Local variables—in scope from declaration to end of block
■ Instance variables—in scope from declaration until object garbage collected
■ Class variables—in scope from declaration until program ends


So far so good. This is a common pattern that you should be familiar with. How about
this one?
/* header */
package structure;
// class Meerkat
public class Meerkat { }

A file is also allowed to have neither class be public. As long as there isn’t more than
one public class in a fi le, it is okay. On the OCP exam, you’ll also need to understand inner
classes, which are classes within a class.


A reference may or may
not be created on the heap.
All references are the same
size, no matter what their
data type is, and are accessed
by their variable name.

Objects are always on the heap.
They have no name and can only be
accessed via a reference. Objects vary in
size depending on their class definition.

Remember, finalize() is only run when the object is eligible for garbage collection. The
problem here is that by the end of the method, the object is no longer eligible for garbage
collection because a static variable is referring to it and static variables stay in scope until
the program ends. Java is smart enough to realize this and aborts the attempt to throw out
the object. Now suppose later in the program objects is set to null . Oh, good, we can
fi nally remove the object from memory. Java remembers already running finalize() on
this object and will not do so again. The lesson is that the finalize() call could run zero
or one time. This is the exact same lesson as the simple example—that’s why it’s so easy to
remember.

Scope refers to that portion of code where a variable can be accessed. There are three
kinds of variables in Java, depending on their scope: instance variables, class variables, and
local variables. Instance variables are the nonstatic fi elds of your class. Class variables are
the static fi elds within a class. Local variables are declared within a method.
Garbage collection is responsible for removing objects from memory when they can
never be used again. An object becomes eligible for garbage collection when there are no
more references to it or its references have all gone out of scope. The finalize() method
will run once for each object if/when it is fi rst garbage collected.	