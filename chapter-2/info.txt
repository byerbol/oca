int y = 4;
double x = 3 + 2 * --y;



In this example, you would fi rst decrement y to 3 , and then multiply the resulting value
by 2 , and fi nally add 3 . The value would then be automatically upcast from 9 to 9.0 and
assigned to x . The fi nal values of x and y would be 9.0 and 3 , respectively. If you didn’t
follow that evaluation, don’t worry. By the end of this chapter, solving problems like this
should be second nature.

Post-unary operators expression ++ , expression --
Pre-unary operators ++ expression , -- expression
Other unary operators + , - , !
Shift operators << , >> , >>>
Relational operators < , > , <= , >= , instanceof
Logical operators & , ^ , |
Short-circuit logical operators && , ||
Ternary operators boolean expression ? expression1 : expres-
sion2
Assignment operators = , += , -= , *= , /= , %= , &= , ^= , != , <<= , >>= , >>>=

Numeric Promotion Rules
1. If two values have different data types, Java will automatically promote one of the val-
ues to the larger of the two data types.
2. If one of the values is integral and the other is floating-point, Java will automatically
promote the integral value to the floating-point value’s data type.56

3. Smaller data types, namely byte , short , and char , are first promoted to int any time
they’re used with a Java binary arithmetic operator, even if neither of the operands is
int .
4. After all promotion has occurred and the operands have the same data type, the result-
ing value will have the same data type as its promoted operands.

Let’s tackle some examples for illustrative purposes:
■
What is the data type of x * y ?
int x = 1;
long y = 33;
If we follow the fi rst rule, since one of the values is long and the other is int , and long
is larger than int , then the int value is promoted to a long , and the resulting value is
long .

What is the data type of x / y ?
short x = 10;
short y = 3;
In this case, we must apply the third rule, namely that x and y will both be promoted
to int before the operation, resulting in an output of type int . Pay close attention to
the fact that the resulting output is not a short , as we’ll come back to this example in
the upcoming section on assignment operators.

By defi nition, a unary operator is one that requires exactly one operand, or variable, to
function.

int x = !5; // DOES NOT COMPILE
boolean y = -true; // DOES NOT COMPILE
boolean z = !0; // DOES NOT COMPILE

int x = 3;
int y = ++x * 5 / x-- + --x;
System.out.println("x is " + x);
System.out.println("y is " + y);

int x = 1.0; // DOES NOT COMPILE
short y = 1921222; // DOES NOT COMPILE
int z = 9f; // DOES NOT COMPILE
long t = 192301398193810323; // DOES NOT COMPILE
The fi rst statement does not compile because you are trying to assign a double 1.0 to an
integer value. Even though the value is a mathematic integer, by adding .0 , you’re instruct-
ing the compiler to treat it as a double . The second statement does not compile because the
literal value 1921222 is outside the range of short and the compiler detects this. The third
statement does not compile because of the f added to the end of the number that instructs
the compiler to treat the number as fl oating-point value. Finally, the last statement does not
compile because Java interprets the literal as an int and notices that the value is larger than
int allows. The literal would need a postfi x L to be considered a long .

The expressions in the previous example now compile, although there’s a cost. The sec-
ond value, 1,921,222 , is too large to be stored as a short , so numeric overfl ow occurs
and it becomes 20,678 . Overfl ow is when a number is so large that it will no longer fi t
within the data type, so the system “wraps around” to the next lowest value and counts
up from there. There’s also an analogous underfl ow, when the number is too low to fi t in
the data type.
This is beyond the scope of the exam, but something to be careful of in your own code.
For example, the following statement outputs a negative number:
System.out.print(2147483647+1);
// -2147483648
Since 2147483647 is the maximum int value, adding any strictly positive value to it will
cause it to wrap to the next negative number.

Let’s return to one of our earlier examples for a moment:
short x = 10;
short y = 3;
short z = x * y;
// DOES NOT COMPILE
Based on everything you have learned up until now, can you understand why the last
line of this statement will not compile? If you remember, short values are automatically
promoted to int when applying any arithmetic operator, with the resulting value being of
type int . Trying to set a short variable to an int results in a compiler error, as Java thinks
you are trying to implicitly convert from a larger data type to a smaller one.

Compound Assignment Operators

int x = 2, z = 3;
x = x * z; // Simple assignment operator
x *= z; // Compound assignment operator

Compound operators are useful for more than just shorthand—they can also save us
from having to explicitly cast a value. For example, consider the following example, in
which the last line will not compile due to the result being promoted to a long and assigned
to an int variable:
long x = 10;
int y = 5;
y = y * x; // DOES NOT COMPILE
Based on the last two sections, you should be able to spot the problem in the last line.
This last line could be fi xed with an explicit cast to (int) , but there’s a better way using the
compound assignment operator:
long x = 10;
int y = 5;
y *= x;
The compound operator will fi rst cast x to a long , apply the multiplication of two long
values, and then cast the result to an int . Unlike the previous example, in which the com-
piler threw an exception, in this example we see that the compiler will automatically cast
the resulting value to the data type of the value on the left-hand side of the compound
operator.


One fi nal thing to know about the assignment operator is that the result of the assign-
ment is an expression in and of itself, equal to the value of the assignment. For example, the
following snippet of code is perfectly valid, if not a little odd looking:
long x = 5;
long y = (x=3);
System.out.println(x); // Outputs 3
System.out.println(y); // Also, outputs 3

A more common example of where short-circuit operators are used is checking for null
objects before performing an operation, such as this:
if(x != null && x.getValue() < 5) {
// Do something
}
In this example, if x was null , then the short-circuit prevents a NullPointerException
from ever being thrown, since the evaluation of x.getValue() < 5 is never reached.
Alternatively, if we used a logical & , then both sides would always be evaluated and when x
was null this would throw an exception:
if(x != null & x.getValue() < 5) { // Throws an exception if x is null
// Do something
}

Be wary of short-circuit behavior on the exam, as questions are known to alter a vari-
able on the right-hand side of the expression that may never be reached. For example, what
is the output of the following code?
int x = 6;
boolean y = (x >= 6) || (++x <= 7);
System.out.println(x);
Because x >= 6 is true , the increment operator on the right-hand side of the expression
is never evaluated, so the output is 6 .

File x = new File("myFile.txt");
File y = new File("myFile.txt");
File z = x;
System.out.println(x == y); // Outputs false
System.out.println(x == z); // Outputs true
























