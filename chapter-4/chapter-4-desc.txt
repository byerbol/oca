Methods and Encapsulation.

Working with Methods and Encapsulation

Create methods with arguments and return values; including
"overloaded" methods

Apply the static keyword to methods and fields

Create and overload constructors; include impact on default
constructors

Apply access modifiers

Apply encapsulation principles to a class

Determine the effect upon object references and primitive
values when they are passed into methods that change the
values

Working with Selected classes from the Java API

Write a simple Lambda expression that consumes a Lambda
Predicate expression

	Applying Access Modifiers

private : Only accessible within the same class
default (package private) access: private and other classes in the same package
protected : default access (same package) and child classes
public : protected and classes in the other packages


Static vs. Instance



Static Variables

Other static variables are meant to never change during the program. This type of vari-
able is known as a constant. It uses the final modifi er to ensure the variable never changes.
static final constants use a different naming convention than other variables. They use
all uppercase letters with underscores between “words.” For example:
public class Initializers {
private static final int NUM_BUCKETS = 45;
public static void main(String[] args) {
NUM_BUCKETS = 5; // DOES NOT COMPILE
} }
The compiler will make sure that you do not accidentally try to update a fi nal variable.
This can get interesting. Do you think the following compiles?
private static final ArrayList<String> values = new ArrayList<>();
public static void main(String[] args) {
values.add("changed");
}
It actually does compile. values is a reference variable. We are allowed to call methods
on reference variables. All the compiler can do is check that we don’t try to reassign the
final values to point to a different object.


Remember that static imports are
only for importing static members.

Regular imports are for importing a class.

There’s only one more scenario with static imports. In Chapter 1, you learned that
importing two classes with the same name gives a compiler error. This is true of static
imports as well. The compiler will complain if you try to explicitly do a static import of
two methods with the same name or two static variables with the same name. For example:
import static statics.A.TYPE;
import static statics.B.TYPE;
// DOES NOT COMPILE
Luckily when this happens, we can just refer to the static members via their classname in
the code instead of trying to use a static import.


Remember that a default constructor is only supplied if there are no constructors
present. Which of these classes do you think has a default constructor?
class Rabbit1 {
}
class Rabbit2 {
public Rabbit2() { }
}
class Rabbit3 {
public Rabbit3(boolean b) { }
}
class Rabbit4 {
private Rabbit4() { }
}
Only Rabbit1 gets a default no-argument constructor. It doesn't have a constructor
coded so Java generates a default no-argument constructor. Rabbit2 and Rabbit3 both have
public constructors already. Rabbit4 has a private constructor. Since these three classes
have a constructor defi ned, the default no-argument constructor is not inserted for you.

Overloading Constructors
Up to now, you’ve only seen one constructor per class. You can have multiple constructors
in the same class as long as they have different method signatures. When overloading meth-
ods, the method name and parameter list needed to match. With constructors, the name is
always the same since it has to be the same as the name of the class. This means construc-
tors must have different parameters in order to be overloaded.
This example shows two constructors:
public class Hamster {
private String color;
private int weight;
public Hamster(int weight) {
// first constructor
this.weight = weight;
color = "brown";
}
public Hamster(int weight, String color) {
// second constructor
this.weight = weight;
this.color = color;
}
}


Encapsulating Data
In Chapter 1, we had an example of a class with a fi eld that wasn’t private:
public class Swan {
int numberEggs;
}
// instance variable
Why do we care? Since there is default (package private) access, that means any class
in the package can set numberEggs . We no longer have control of what gets set in our own
class. A caller could even write this:
mother.numberEggs = -1;
This is clearly no good. We do not want the mother Swan to have a negative number of
eggs!
Encapsulation to the rescue. Encapsulation means we set up the class so only methods
in the class with the variables can refer to the instance variables. Callers are required to use
these methods. Let’s take a look at our newly encapsulated Swan class:

1: public class Swan {
	2: private int numberEggs; // private
	3: public int getNumberEggs() { // getter
	4:return numberEggs;
	5: }
	6: public void setNumberEggs(int numberEggs) {// setter
	7:if (numberEggs >= 0)// guard condition
	8:this.numberEggs = numberEggs;
	9: } 
}

private boolean playing;
private String name;
public boolean getPlaying() { return playing; }
public boolean isPlaying() { return playing; }
public String name() { return name; }
public void updateName(String n) { name = n; }
public void setname(String n) { name = n; }

Lines 12 and 13 are good. They are private instance variables. Line 14 doesn't follow the
JavaBeans naming conventions. Since playing is a boolean , the getter must begin with is .
Line 15 is a correct getter for playing . Line 16 doesn't follow the JavaBeans naming con-
ventions because it should be called getName . Lines 17 and 18 do not follow the JavaBeans
naming conventions because they should be named setName . Remember that Java is case
sensitive, so setname is not adequate to meet the naming convention.	

a -> a.canHop()


(a) - parameter name
-> - arrow
a.canHop() -> body 


return and ; needs when it in code block


print(a, b -> a.startsWith("test"));
print(a -> { a.startsWith("test"); });
print(a -> { return a.startsWith("test") });
// DOES NOT COMPILE
// DOES NOT COMPILE
// DOES NOT COMPILE
The fi rst line needs parentheses around the parameter list. Remember that the parenthe-
ses are only optional when there is one parameter and it doesn’t have a type declared. The
second line is missing the return keyword. The last line is missing the semicolon.
You might have noticed all of our lambdas return a boolean . That is because the scope
for the OCA exam limits what you need to learn.

There is one more issue you might see with lambdas. We’ve been defi ning an argument
list in our lambda expressions. Since Java doesn’t allow us to redeclare a local variable, the
following is an issue:
(a, b) -> { int a = 0; return 5;}
// DOES NOT COMPILE

We tried to redeclare a , which is not allowed. By contrast, the following line is okay
because it uses a different variable name:

anonymous function: has parameters & body but no name;
(a, b) -> { int c = 0; return 5;}


Instance
members are allowed to call static members, but static members are not allowed to call
instance members. Static imports are used to import static members.

Java uses pass-by-value, which means that calls to methods create a copy of the parameters.
Assigning new values to those parameters in the method doesn’t affect the caller’s variables.