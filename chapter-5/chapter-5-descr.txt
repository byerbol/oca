Java supports single inheritance, by which a class may inherit from only one direct par-
ent class. Java also supports multiple levels of inheritance, by which one class may extend
another class, which in turn extends another class. You can extend a class any number of
times, allowing each descendent to gain access to its ancestor’s members.

To truly understand single inheritance, it may helpful to contrast it with multiple inheri-
tance, by which a class may have multiple direct parents. By design, Java doesn’t support
multiple inheritance in the language because studies have shown that multiple inheritance
can lead to complex, often diffi cult-to-maintain code. Java does allow one exception to the
single inheritance rule: classes may implement multiple interfaces, as you’ll see later in this
chapter.

single inheritance & multiple interface 

If the parent doesn’t have a no-argument constructor and the child doesn’t define any
constructors, the compiler will throw an error and try to insert a default no-argument
constructor into the child class.

Java allows calling a static method through an
instance variable.

Calling Constructors
Now that we have covered how to defi ne a valid constructor, we’ll show you how Java calls
the constructors. In Java, the parent constructor is always executed before the child con-
structor. For example, try to determine what the following code outputs:


Since the main() method is in the same class, it can call private methods in the
class. this() may only be called as the first line of a constructor. this.variableName
can be called from any instance method to refer to an instance variable. It cannot be
called from a static method because there is no instance of the class to refer to. Option
F is tricky. The default constructor is only written by the compiler if no user-defined
constructors were provided. this() can only be called from a constructor in the same
class. Since there can be no user-defined constructors in the class if a default construc-
tor was created, it is impossible for option F to be true.

if no constructor is defined by user, compiler defined for that default constructor.


Both instance and static initializers are able to access static variables

Understanding Compiler Enhancements? (how parent's and child's constructors are compile)

super() vs. super
The fi rst,
super() , is a statement that explicitly calls a parent constructor and may only be used in
the fi rst line of a constructor of a child class. The second, super , is a keyword used to ref-
erence a member defi ned in a parent class and may be used throughout the child class.

public Rabbit(int age) {
	super();
	super.setAge(10);
}

Overloading vs. Overriding

Overloading a method and overriding a method are similar in that they both involve
redefi ning a method using the same name. They differ in that an overloaded method will
use a different signature than an overridden method. This distinction allows overloaded
methods a great deal more freedom in syntax than an overridden method would have.
For example, take a look at the following code sample:
public class Bird {
	public void fly() {
		System.out.println("Bird is flying");
	}
	public void eat(int food) {
		System.out.println("Bird is eating "+food+" units of food");
	}
}
public class Eagle extends Bird {
	public int fly(int height) {
		System.out.println("Bird is flying at "+height+" meters");
		return height;
	}
	public int eat(int food) { // DOES NOT COMPILE
		System.out.println("Bird is eating "+food+" units of food");
		return food;
	}
}

The fi rst method, fly() , is overloaded in the subclass Eagle , since the signature changes
from a no-argument constructor to a constructor with one int argument. Because the
method is being overloaded and not overridden, the return type can be changed from
void to int without issue.

Redeclaring private Methods